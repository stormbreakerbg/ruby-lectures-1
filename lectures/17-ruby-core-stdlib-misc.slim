= slide 'Честита Нова година!' do
  img src="17/make-it-so.jpg"

= slide 'Днес' do
  list:
    Ruby Core
    Ruby Standard Library
    Решение на последното предизвикателство
    Решение на последната задача
    Разни

= slide 'Дати за изпита' do
  list:
    Вторият тест ще се проведе на 9 февруари 2014 г., от 09 ч. в зала 01
    За защита на проекти сте разделени на две групи
    Четните факултетни номера ще защитават на 9 февруари, от 11:00 ч., в зала 01
    Нечетните факултетни номера ще защитават на 22 февруари, от 09:00 ч., в зала 307
    Ако имате уважителна причина да не можете на определената за вас дата, [пишете ни](/team) навреме

= slide 'The Ten Commandments of Egoless Programming' do
  ul
    li Наскоро се завъртяха пак, въпреки че са отдавна
    li Заслужават си и са добър начин за начало на новата година
    li Може да ги видите в <a href="http://www.codinghorror.com/blog/2006/05/the-ten-commandments-of-egoless-programming.html">оригиналния контекст тук</a>
    li Нека ги разгледаме

= slide '1. Understand and accept that you will make mistakes.' do
  blockquote
    |
      The point is to find them early, before they make it into production. Fortunately, except for the few of us developing rocket guidance software at JPL, mistakes are rarely fatal in our industry, so we can, and should, learn, laugh, and move on.

= slide '2. You are not your code.' do
  blockquote
    |
      Remember that the entire point of a review is to find problems, and problems will be found. Don't take it personally when one is uncovered.

= slide '3. No matter how much "karate" you know, someone else will always know more.' do
  blockquote
    |
      Such an individual can teach you some new moves if you ask. Seek and accept input from others, especially when you think it's not needed.

= slide "4. Don't rewrite code without consultation." do
  blockquote
    |
      There's a fine line between "fixing code" and "rewriting code." Know the difference, and pursue stylistic changes within the framework of a code review, not as a lone enforcer.

= slide '5. Treat people who know less than you with respect, deference, and patience.' do
  blockquote
    |
      Nontechnical people who deal with developers on a regular basis almost universally hold the opinion that we are prima donnas at best and crybabies at worst. Don't reinforce this stereotype with anger and impatience.

= slide '6. The only constant in the world is change.' do
  blockquote
    |
      Be open to it and accept it with a smile. Look at each change to your requirements, platform, or tool as a new challenge, not as some serious inconvenience to be fought.

= slide '7. The only true authority stems from knowledge, not from position.' do
  blockquote
    |
      Knowledge engenders authority, and authority engenders respect – so if you want respect in an egoless environment, cultivate knowledge.

= slide '8. Fight for what you believe, but gracefully accept defeat.' do
  blockquote
    |
      Understand that sometimes your ideas will be overruled. Even if you do turn out to be right, don't take revenge or say, "I told you so" more than a few times at most, and don't make your dearly departed idea a martyr or rallying cry.

= slide %(9. Don't be "the guy in the room.") do
  blockquote
    |
      Don't be the guy coding in the dark office emerging only to buy cola. The guy in the room is out of touch, out of sight, and out of control and has no place in an open, collaborative environment.

= slide '10. Critique code instead of people – be kind to the coder, not to the code.' do
  blockquote
    |
      As much as possible, make all of your comments positive and oriented to improving the code. Relate comments to local standards, program specs, increased performance, etc.

= slide 'Шарлатан' do
  p В <a href="/challenges/12">дванадесетото предизвикателство</a> искахме от вас да реализирате прост DSL:

  example:
    Charlatan.trick do
      pick_from 1..10
      multiply_by 2
      multiply_by 5
      divide_by :your_number
      subtract 7
      you_should_get 3
    end

= slide 'Грешки и неподходящи решения' do
  list:
    Ще разгледаме някои ваши грешки, преди да покажем нашето решение
    Все още има решения с проблемна идентация или груби нарушения на конвенциите

= slide 'Грешка: дефиниране на методи в Object' do
  p Това е лоша идея, понеже "замърсява" всички обекти. В този пример, употребата на класови променливи също не е добра идея.

  example:
    module Charlatan
      def Charlatan.trick(&block)
        block.call
      end
    end

    class Object
      def pick_from(range)
         @@random_number = Random.rand(range)
         @@current_number = @@random_number
      end

      # ...
    end

= slide 'Грешка: дефиниране на методи в Object' do
  p Ако случайно някой все още не знае, това е същата грешка като на предишния слайд:

  example:
    module Charlatan
      def self.trick
        yield
      end
    end

    def pick_from(range)
      @range = range.to_a.zip range.to_a
    end

    def add(number)
      @range.each { |n| n[1] += (number != :your_number ? number : n[0]) }
    end

    # ...

= slide 'Грешка: използване на глобален контекст' do
  p Да ползвате класов/модул контекст е същото като да ползвате глобални променливи и носи същите негативи. Най-малкото, кодът ви няма да е thread-safe.

  example:
    module Charlatan
      def self.trick(&block)
        instance_eval &block
      end

      def self.pick_from(range)
        @result = range.to_a.dup
        @your_number = range.to_a.dup
      end

      # ...
    end

= slide 'Грешка: дефинирате помощни класове извън Charlatan' do
  p Това не е толкова фатално, но пак "замърсява" глобалното пространство с класове, които са всъщност вътрешни и специфични за вашата имплементаация:

  example:
    module Charlatan
      class << self
        def trick(&block)
          trick_object = Trick.new
          trick_object.instance_eval(&block)
        end
      end
    end

    class Trick
      def initialize
        @numbers = {}
      end

      # ...
    end

= slide 'Грешка: не ползвате instance_eval' do
  p Признавам, това решение ме свари неподготвен:

  example:
    module Charlatan
      def self.trick(&block_to_validate)
        block_source = extract_source block_to_validate
        trick_from_source_code(block_source).valid?
      end

      private

      def self.extract_source(block)
        file_path, start_line =  block.source_location
        source = File.open(file_path, "rb") { |file| file.read }
        source.lines.slice(start_line, source.lines.size).take_while { |line| line.match(/end/) == nil }
      end

      # ...
    end

= slide 'Грешка: не ползвате instance_eval (2)' do
  p Получило се е нещо като мини parser за Ruby код :)

  example:
    module Charlatan
      def self.trick_from_source_code(block_source)
        operations = []
        range, expected_result = nil

        block_source.map  do |line|
          _, instruction_name, argument = line.match(/\s*(\S*)\s*(\S*)/).to_a

          case instruction_name
          when "pick_from"
            range = Range.new(*argument.split("..").map(&:to_i))
          when "you_should_get"
            argument = argument.start_with?(":") ? nil : argument.to_i
            expected_result = argument
          else
            argument = argument.start_with?(":") ? nil : argument.to_i
            operations << {available_operations[instruction_name.to_sym] => argument}
          end
        end
      end
    end

= slide 'under_score конвенция за имена на методи' do
  p Ако случайно се чудите как да приложите конвенцията в следния случай, то отговорът е, че методът трябва да се казва <code>get_dsl</code>, а не <code>get_DSL</code>:

  example:
    class Charlatan
      def self.get_DSL
        CharlatanDSL.new
      end

      # ...
    end

= slide 'Нашето решение' do
  p Дефинираме отделен клас, инстанциите на който ще бъдат "контекст" на оценката на DSL-а:

  example:
    module Charlatan
      class Evaluator
        # ...
      end

      def self.trick(&block)
        Evaluator.new.instance_eval &block
      end
    end

  p Обърнете внимание на <code>instance_eval</code>-метода.

= slide 'Evaluator (1)' do
  p Инстанционните методи на класа са нашите DSL "глаголи":

  example:
    class Evaluator
      def initialize
        @operations_queue = []
      end

      def pick_from(range)
        @numbers = range
      end

      # ...
    end

= slide 'Evaluator (2)' do
  p Използваме малко метапрограмиране, за да намалим дублирането на логика:

  example:
    class Evaluator
      operations = {
        add:         :'+',
        subtract:    :'-',
        multiply_by: :'*',
        divide_by:   :'/',
      }

      operations.each do |operation_name, operation|
        define_method operation_name do |argument|
          @operations_queue << [operation, argument]
        end
      end

      # ...
    end

= slide 'To metaprogram or not to metaprogram? (1)' do
  example:
    class Charlatan
      def initialize
        @operations = []
      end

      def add(number)
        @operations << [:+, number]
      end

      def subtract(number)
        @operations << [:-, number]
      end

      def multiply_by(number)
        @operations << [:*, number]
      end

      def divide_by(number)
        @operations << [:/, number]
      end
    end

= slide 'To metaprogram or not to metaprogram? (2)' do
  list:
    Кодът на предния слайд е извадка от решението на [Георги Ангелов](/users/10)
    Не е много по-дълго от нашия код
    Повторението на логиката е минимално и е локализирано
    Може да видите сходна ситуация и в решението на [Георги Кръстев](/users/113) - също много кратко и чисто
    Изниква въпросът доколко оправдано е използването на метапрограмиране в този случай
    Периодично напомняне: метапрограмирането трябва да се ползва с повишено внимание

= slide 'To metaprogram or not to metaprogram? (3)' do
  p От друга страна, това вече е твърде много дублиране:

  example:
    Action = Struct.new(:type, :number)
    class TrickSet
      def initialize()
        @actions = Array.new
      end
      def add(number)
        action = Action.new
        action.type = "add"
        action.number = number
        @actions.push(action)
      end
      def subtract(number)
        action = Action.new
        action.type = "subtract"
        action.number = number
        @actions.push(action)
      end
      def multiply_by(number)
        action = Action.new
        action.type = "multiply_by"
        action.number = number
        @actions.push(action)
      end
      def divide_by(number)
        action = Action.new
        action.type = "divide_by"
        action.number = number
        @actions.push(action)
      end
      # ...
    end

= slide 'To metaprogram or not to metaprogram? (4)' do
  ul
    li Кодът на предния слайд имаше твърде много дублиране
    li Вредите от метапрограмиране в този случай ще са по-малки от това да оставите дублажа така
    li От друга страна, видяхме, че има и други, много по-прости и ясни решения, без метапрограмиране
    li Направете си изводите сами

= slide 'Evaluator (3)' do
  p Реалната проверка става в <code>you_should_get</code>, който прилага операциите, наредени на опашката, над всяко число:

  example:
    class Evaluator
      # ...

      def you_should_get(argument)
        @numbers.all? do |number|
          expected = argument == :your_number ? number : argument
          expected == perform_operations_on(number)
        end
      end

      private

      def perform_operations_on(number)
        @operations_queue.reduce(number) do |current_result, (operation, argument)|
          argument = number if argument == :your_number
          current_result.public_send operation, argument
        end
      end
    end

= slide 'Въпроси дотук?' do
  p Ако имате въпроси по нещата, казани дотук, може да ги зададете сега.

= slide 'String#%' do
  list:
    Методът `%` на `String` е много удобен за интерполация и форматиране на определени низове
    Тази функционалност е позната още като "sprintf"
    Подробна документация за нея може да се намери в [`Kernel.sprintf`](http://ruby-doc.org/core-2.1.0/Kernel.html#method-i-sprintf)
    Два основни режима на работа – с позиционни и с именувани placeholder-и
    `%` може да се ползва и без точка, като други методи, наподобяващи оператори

= slide 'String#%', 'пример с позиционни аргументи' do
  p Когато имаме повече от една стойност за интерполация, трябва да подадем списък:

  annotate:
    '%02d' % 7                             # =>
    '%02d:%02d:%02d' % [19, 5, 2]          # =>

    name = 'Пешо'
    'Здравей, <strong>%s</strong>!' % name # =>

= slide 'String#%', 'пример с именувани аргументи' do
  annotate:
    template = '
      <html>
      <head>
        <title>%{title}</title>
      </head>
      <body>
        %{content}
      </body>
      </html>
    '

    variables = {
      title:   'String Interpolation',
      content: 'Made easy by Kernel.sprintf.',
      foobar:  'Extra keys are not an issue.'
    }

    template % variables # =>

= slide 'Трета задача' do
  list:
    Надявам се, че ви е била интересна, забавна и полезна
    Оставил съм коментари на тези от вас, предали решения по-рано
    На някои решения съм раздал и бонус точки, или пък съм взел наказателни такива
    Може да разгледате [решенията и коментарите по тях](/tasks/3/solutions)

= slide 'Раждането на трета задача' do
  list:
    Оригиналната идея на задачата беше малко по-различна
    Завършената версия на тази задача бе написана в рамките на два-три дни
    Отне приблизително около 15-25 човекочаса
    Около 80 commit-а в Git

= slide 'Кратък преглед на нашето решение' do
  p Споменавал съм повечето неща в коментари към вашите решения, но въпреки това, ще разгледаме накратко нашето решение.

= slide 'Тестове на трета задача' do
  p Искам да обърна внимание, че в хранилището с домашните има два теста за трета задача

  ol
    li <a href="https://github.com/fmi/ruby-homework/blob/master/tasks/03/full_spec.rb">full_spec.rb</a>
    li <a href="https://github.com/fmi/ruby-homework/blob/master/tasks/03/spec.rb">spec.rb</a>

  list:
    Задачата е проверявана със `spec.rb`
    Докато я разработвах, писах и ползвах `full_spec.rb`
    `full_spec.rb` е по-тясно свързан с особеностите на моя дизайн и е продукт от TDD-то ми
    `spec.rb` е малко по-близо до понятието "интеграционен тест"
    Ако кодът в production беше моето решение, то тестът към него би трябвало да е по-скоро `full_spec.rb`

= slide 'Canvas#render_as' do
  p Нека си припомним <code>Canvas#render_as</code>:

  example:
    module Graphics
      class Canvas
        def render_as(renderer)
          renderer.new(self).render
        end
      end
    end

= slide 'Тестове за Canvas#render_as' do
  p Забележете, че нито разчитат на, нито зависят от съществуването на renderer-и:

  example:
    describe "Graphics" do
      describe "Canvas" do
        it "returns a rendering via render_as with external renderers" do
          null_renderer = Class.new do
            def initialize(canvas)
              @canvas = canvas
            end

            def render()
              "canvas: #{@canvas.width}x#{@canvas.height}"
            end
          end

          Graphics::Canvas.new(800, 600).render_as(null_renderer).should eq 'canvas: 800x600'
        end
      end
    end

= slide 'Тестове за Canvas#draw' do
  p Аналогично за <code>Canvas#draw</code> – тестът не зависи от shape:

  example:
    module Graphics
      class Canvas
        def draw(shape)
          shape.rasterize_on(self)
        end
      end
    end

    describe "Graphics" do
      describe "Canvas" do
        it "allows drawing of shapes on itself" do
          shape = double
          shape.should_receive(:rasterize_on).with(canvas)
          canvas.draw(shape)
        end
      end
    end

= slide 'Тестове' do
  list:
    Тези тестове са специфични за моята имплементация и моя вътрешен интерфейс
    В тях се стремя да завися от колкото се може по-малко външни фактори
    С отговорността за растеризацията съм натоварил всяка "форма"
    Следователно, тестовете за растеризация са в `Point`, `Line` и `Rectangle`
    От друга страна, `spec.rb` е по-близо до интеграционен тест, за да ви позволи свобода в дизайна
    Растеризацията се тества с `Canvas#draw(shape)` + `Canvas#render_as(Graphics::Renderers::Ascii)`

= slide 'Point#rasterize_on' do
  p Ето как изглеждат моите unit-тестове на <code>Point#rasterize_on</code> – не зависят от <code>Canvas</code>:

  example:
    describe "Graphics" do
      context "shapes" do
        describe "Point" do
          context "rasterize_on" do
            it "draws the point on the canvas" do
              canvas = double
              canvas.should_receive(:set_pixel).with(3, 4)
              make_point(3, 4).rasterize_on(canvas)
            end
          end
        end
      end
    end

= slide 'Line#rasterize_on' do
  p Тестовете на <code>Line#rasterize_on</code> са по-различни, обаче, поради по-сложния алгоритъм на растеризация. Те зависят от рендерерите и от паното:

  example:
    describe "Graphics" do
      context "shapes" do
        describe "Line" do
          context "rasterize_on" do
            it "draws simple horizontal lines" do
              canvas = make_canvas 8, 3
              canvas.draw make_line(make_point(3, 1), make_point(6, 1))

              check_rendering_of canvas, '
                --------
                ---@@@@-
                --------
              '
            end
          end
        end
      end
    end

= slide 'Проблеми със силно алгоритмични решения' do
  list:
    Проблемът с разбиване на алгоритъм на малки, разбираеми методи и стъпки е сложен
    Не винаги е възможно, не винаги всяко разбиване е добра идея
    Обикновено, обаче, разбиване поне донякъде помага за яснотата и четимостта
    Тук праволинейният подход би довел до купчина `private` методи в `Line`
    Не би трябвало да тествате `private` методи
    Какво правим в такъв случай?

= slide 'BresenhamRasterization' do
  list:
    Един добър начин в ОО програмирането е да си създадем нов клас, имащ тази отговорност
    Така се ражда `BresenhamRasterization`
    Има си инстанции, състояние, публичен интерфейс и прочее
    Така решавате и проблема със "забраната" за тестване на `private` методи

= slide 'Line#rasterize_on' do
  list:
    Тестът на този метод отново е по-близък до интеграционен
    Тъй като аз имам клас `BresenhamRasterization`, това не е съвсем правилно
    Би трябвало само да тествам, че `Line#rasterize_on` ползва публичния интерфейс на `BresenhamRasterization`
    Отделно, би трябвало да имам unit-тестове за `BresenhamRasterization` и неговите методи

= slide 'Защо интеграционни тестове?' do
  list:
    Водех се по вече съществуваща имплементация на Брезенхам, която "преведох" на Ruby
    Растеризацията на Брезенхам е добре известен и решен проблем, нямаше нужда да "откривам" дизайн с тестове
    Интеграционни тестове, покриващи различните случаи на проблема с растеризацията ми бяха достатъчни
    Дали това е правилно решение или не, оставям на вас да прецените, според ситуацията

= slide 'Въпроси дотук?' do
  p Ако имате въпроси по трета задача или друго от казаното дотук, сега може да ги зададете.

= slide 'Ruby ядро и стандартна библиотека' do
  list:
    Функционалността, която идва с Ruby, е разделена на две
    Ruby Core ([документация](http://ruby-doc.org/core-2.1.0/))
    Ruby Stdlib (стандартна библиотека) ([документация](http://ruby-doc.org/stdlib-2.1.0/))

= slide 'Ruby core' do
  list:
    Ядрото на Ruby съдържа неща, които са част от интерпретатора и са винаги заредени и налични
    Друг поглед над това е, че винаги заемат памет и не можете да ги махнете
    Това е и причината немалка част от функционалността да е изведена в т.нар. "стандартна библиотека"
    Там са неща, които се ползват сравнително често, но <em>не винаги</em>
    Разглеждали сме повечето класове от `core`; сега ще видим още няколко интересни класа

= slide 'Struct' do
  list:
    Бърз начин да създавате мини-класове, представляващи колекция от атрибути
    Освен getter-и и setter-и за атрибутите, наподобяват малко на хеш
    [Документация на `Struct`](http://ruby-doc.org/core-2.1.0/Struct.html)

= slide 'Struct', 'пример от документацията' do
  p Виждате, че може да добавите и свои методи там

  annotate:
    Customer = Struct.new(:name, :address) do
      def greeting
        "Hello #{name}!"
      end
    end

    dave = Customer.new('Dave', '123 Main')

    dave.name     # =>
    dave.address  # =>
    dave.greeting # =>

= slide 'Struct' do
  p Обектите от тип <code>Struct</code> приличат на колекции (хешове):

  annotate:
    Customer = Struct.new(:name, :address, :zip)
    john = Customer.new('John Doe', '123 Maple, Anytown NC', 12345)

    john.name      # =>
    john['name']   # =>
    john[:name]    # =>
    john[0]        # =>

    john.length    # =>
    john.each      # =>

= slide 'Приложение на Struct' do
  p Удобно е да се ползва в тестове. За production код – по-рядко.

= slide 'Comparable' do
  list:
    Ползва се, когато имате наредба на инстанциите на вашия клас
    Дефинирате `<=>` и правите `include Comparable`
    Получавате `<`, `<=`, `==`, `>=`, `>` и `between?`
    Някои от вас са го ползвали в трета задача

= slide 'Comparable', 'пример' do
  annotate:
    class Money
      include Comparable

      attr :amount, :currency

      def initialize(amount, currency)
        @amount, @currency = amount, currency
      end

      def <=>(money)
        return unless currency == money.currency
        amount <=> money.amount
      end
    end

    Money.new(15, :BGN) < Money.new(30, :BGN) # =>

= slide 'Marshal' do
  list:
    Може да се ползва за сериализиране и десериализиране на Ruby обекти
    Продуцира binary низ
    Проста употреба – `Marshal.load` и `Marshal.dump`
    Някои обекти не могат да бъдат сериализирани
    Може да предефинирате как (какво) да е представянето на ваш клас за сериализация
    За целта дефинирате методи `marshal_dump` и `marshal_load`
    Пълната му документация е [тук](http://ruby-doc.org/core-2.1.0/Marshal.html)

= slide 'Marshal', 'пример' do
  annotate:
    data = [42, :answer, {foo: 'bar'}]

    serizlized = Marshal.dump data

    serizlized                       # =>
    Marshal.load(serizlized) == data # =>
    Marshal.load(serizlized)         # =>

= slide 'Marshal', 'употреба и бележки' do
  list:
    Привидно удобен за употреба
    Съображения за сигурност при зареждане на серизлизирани данни "отвън"
    Може да доведе до изпълнение на произволен код
    За алтернатива на `Marshal` може да се ползва `YAML`, от стандартната библиотека
    YAML продуцира "човешки-четим" формат, но носи същите рискове за сигурността

= slide 'Следва продължение...' do
  p Ще разгледаме още класове от Ruby Core и Ruby Stdlib следващия път.
